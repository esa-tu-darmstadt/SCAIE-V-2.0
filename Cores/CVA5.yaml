# CVA5. 0: Fetch, 1: Decode, 2: Issue, 3: Execute
!SerialCoreDescription
pipeline:
  name: root
  kind: root
  tags: []
  externalID: -1
  continuous: false
  nextStages: []
  children:
  - {name: fetch,      kind: core,          externalID: 0,  continuous: true,  tags: [inorder], nextStages: [decode], children: []}
  - {name: decode,     kind: core,          externalID: 1,  continuous: false, tags: [inorder], nextStages: [issue], children: []}
  - {name: issue,      kind: core,          externalID: 2,  continuous: true,  tags: [inorder], nextStages: [executesv1, executecva], children: []}
  # Execute marked as commit (for custom register commit
  - {name: executesv1, kind: core,          externalID: 3,  continuous: true,  tags: [inorder, execute, commit], nextStages: [decoupled1], children: []}
  - {name: decoupled1, kind: decoupled,     externalID: 4,  continuous: true,  tags: [inorder, commit], nextStages: [], children: []}
  # Internal stage invisible to the ISAX; placeholder to indicate that not all instructions (i.e. only ISAX instructions) from issue enter executesv1.
  - {name: executecva, kind: core_internal, externalID: -1, continuous: true,  tags: [inorder, commit, noisax], nextStages: [], children: []}
  ## Internal stage invisible to the ISAX; successor to executesv1 for non-decoupled ISAXes, internally used for custom register commit.
  #- {name: commitsv1,  kind: core_internal, externalID: -1, continuous: true,  tags: [inorder, commit], nextStages: [], children: []}
  ## Internal stage invisible to the ISAX; successor to decoupled1, internally used for custom register commit.
  #- {name: commitsv2,  kind: core_internal, externalID: -1, continuous: true,  tags: [inorder, commit], nextStages: [], children: []}
operations:
- {operation: RdCustReg, earliest: 2, latency: 0, latest: 3}
- {operation: WrCustReg.addr, earliest: 2, latency: 0, latest: 2}
- {operation: WrCustReg.data, earliest: 2, latency: 1, costly: 4}
- {operation: RdRS1, earliest: 2, latency: 0, latest: 3, costly: 4}
- {operation: RdRS2, earliest: 2, latency: 0, latest: 3, costly: 4}
- {operation: RdRD, earliest: 2, latency: 0, latest: 2, costly: 3}
- {operation: WrRD, earliest: 3, latency: 1, latest: 3, costly: 4}
- {operation: RdPC, earliest: 0, latency: 0, latest: 3, costly: 4}
- {operation: WrPC, earliest: 0, latency: 0, latest: 3, costly: 1}
- {operation: RdMem, earliest: 3, latency: 0, latest: 3, costly: 4}
- {operation: RdMem_validResp, earliest: 3, latency: 0, latest: 3, costly: 4}
- {operation: WrMem, earliest: 3, latency: 0, latest: 3, costly: 4}
- {operation: WrMem_validResp, earliest: 3, latency: 0, latest: 3, costly: 4}
- {operation: RdInstr, earliest: 1, latency: 0, latest: 3, costly: 4}
- {operation: RdStall, earliest: 0, latency: 0, latest: 3, costly: 4}
- {operation: WrStall, earliest: 0, latency: 0, latest: 3, costly: 4}
- {operation: RdFlush, earliest: 0, latency: 0, latest: 3, costly: 4}
- {operation: WrFlush, earliest: 1, latency: 0, latest: 3, costly: 4}
#Actually provided by SCAL, not by the core
- {operation: RdIValid, earliest: 1, latency: 0, latest: 3, costly: 4}
#Actually provided by SCAL, not by the core
- {operation: RdAnyValid, earliest: 3, latency: 0, latest: 3, costly: 4}
